debugonce(geem2)
gm20 <- geem2(y ~ x, id = id, data = exdat, corstr = "independence",
output = "geeglm")
20
dat
debugonce(geem2)
gm20 <- geem2(y ~ x + I(0 * helpnum), id = id, data = exdat, corstr = "independence",
output = "geeglm")
dat
debugonce(geem2)
gm20 <- geem2(y ~ x + helpnum, id = id, data = exdat, corstr = "independence",
output = "geeglm")
dat
neworder
dat
oldorder
helpnum
dat$helpnum
dat[helpnum,]
dat[dat$helpnum,]
dat[order(dat$helpnum),]
order(dat$helpnum)
oldorder
dat[oldorder,]
dat
oldorder
dropind
setdiff(oldorder, dropind)
dat[setdiff(oldorder, dropind),]
id
includedvec
dropind
results$resid
length(results$resid)
results$resid[oldorder]
lm0$residuals
lm0
residuals(lm0)
residuals(glm0)
fitted(lm0)
results$fitted.values
results$fitted.values[oldorder]
na.omit(results$fitted.values[oldorder])
lm0 <- lm(y ~ x + helpnum, exdat)
glm0 <- glm(y ~ x + helpnum, data = exdat)
gm20 <- geem2(y ~ x + helpnum, id = id, data = exdat, corstr = "independence",
output = "geeglm")
gm20$residuals
lm0$residuals
lm0
glm0
gm20
residuals(lm0)
residuals(glm0)
fitted(lm0)
predict(lm0)
predict(gm20)
debugonce(geem2)
gm20 <- geem2(y ~ x + helpnum, id = id, data = exdat, corstr = "independence",
output = "geeglm")
dropind
dat
dropind
oldorder[dropind]
X
results$resid
lm0$residuals
oldorder
dropind
length(results$resid)
results$resid[oldorder]
results$resid[oldorder][-dropind]
neworder
neworder[-dropind]
order(neworder[-dropind])
results$residuals[order(neworder[-dropind])]
results$residuals[order(neworder[-dropind])]
results$resid[order(neworder[-dropind])]
lm0$residuals
load_all()
lm0 <- lm(y ~ x + helpnum, exdat)
glm0 <- glm(y ~ x + helpnum, data = exdat)
gm20 <- geem2(y ~ x + helpnum, id = id, data = exdat, corstr = "independence",
output = "geeglm")
load_all()
gm20 <- geem2(y ~ x + helpnum, id = id, data = exdat, corstr = "independence",
output = "geeglm")
lm0; glm0; gm20 #same results
#lm and glm have dropped NAs in output - order is not preserved
length(lm0$residuals)
length(glm0$residuals)
length(lm0$fitted.values)
length(glm0$fitted.values)
length(gm20$fitted.values)
cbind(fitted(lm0), fitted(glm0), fitted(gm20))
m <- geem2(outcome ~ treat,
data = respiratory,
id = interaction(center, id),
family = "binomial", corstr = "exchangeable",
ouput = "geeglm")
m <- geem2(outcome ~ treat,
data = respiratory,
id = interaction(center, id),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
m
#print
m
#summary & summary.print
summary(m)
debugonce("geem2")
load_all()
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
m
summary(m)
debugonce("geem2")
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
m
str(m)
str(summary(m))
geepack:::summary.geeglm(m)
mm_gm2 <- geem2(outcome ~ baseline + center + sex + age + I(age^2) + treat, #wmiss1,
data = resp,
id = with(resp, interaction(center, id)),
family = "binomial", corstr = "unstructured",
output = "geeglm")#,
debugonce(geem2)
mm_gm2 <- geem2(outcome ~ baseline + center + sex + age + I(age^2) + treat, #wmiss1,
data = resp,
id = with(resp, interaction(center, id)),
family = "binomial", corstr = "unstructured",
output = "geeglm")#,
dropind
dropind
dropind
neworder
-dropind
which(!dropind)
!dropind
dropind
load_all()
mm_gm2 <- geem2(outcome ~ baseline + center + sex + age + I(age^2) + treat, #wmiss1,
data = resp,
id = with(resp, interaction(center, id)),
family = "binomial", corstr = "unstructured",
output = "geeglm")#,
geepack:::summary.geeglm(mm_gm2)
geepack:::summary.geeglm(mm_gp)
debugonce(geepack:::summary.geeglm)
debugonce(geepack:::print.geeglm)
debugonce(geepack:::print.summary.geeglm)
debugonce(geem.fit)
debugonce(geem2)
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
f
m
summary(m)
debugonce(geepack:::summary.geeglm)
#summary & summary.print
summary(m)
debugonce(geepack:::summary.geeglm)
#summary & summary.print
summary(m)
summary.glm(object)
object$family
object$family$dev.resids()
object$family$dev.resids
debugonce("geem2")
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
famret
str(famret)
debugonce(geepack:::summary.geeglm)
#summary & summary.print
summary(m)
object
str(object)
Qr
debugonce(geepack:::summary.geeglm)
#summary & summary.print
summary(m)
debugonce(geepack:::summary.geeglm)
#summary & summary.print
summary(m)
object[keep]
residuals(object,
type = "deviance")
object
residuals(object)
geepack:::geeglm.residuals
r
object
my
mu
wts
m$residuals
debugonce(geepack:::summary.geeglm)
debugonce("geem2")
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
results$resid
results$resid[oldorder_noNA]
order(neworder)
oldorder_noNA <- order(neworder)
oldorder_noNA
results$residuals
results$resid
length(results$resid)
length(oldorder_noNA)
results$resid[1:44]
results$resid[1:444]
results$resid[444]
results$resid[oldorder_noNA]
results$resid[oldorder_noNA]
results$fitted.values[oldorder_noNA]
results$eta[oldorder_noNA]
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
m$residuals
m$fitted.values
load_all()
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
dopind
dropind
length(NULL)
load_all()
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
#summary & summary.print
summary(m)
#summary & summary.print
summary(m)
#print
m
#predict
predict(m)
head(respiratory)
predict(m, newdata = data.frame(treat = "P"))
levels(resp$treat)
predict(m, newdata = data.frame(treat = c("A", "P"))
predict(m, newdata = data.frame(treat = c("A", "P"))
#predict
predict(m)
predict(m, newdata = data.frame(treat = c("A", "P"))
)
#confint
confint(m)
devtools::install()
library(geeM2)
#confint
confint(m)
geeM2:::confint.geeglm(m)
devtools::document()
#confint
confint(m)
devtools::document()
devtools::install()
library(geeM2)
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
#confint
confint(m)
#drop1/add1
drop1(m)
install_github("hojsgaard/geepack)
install_github("hojsgaard/geepack")
QIC(m)
?QIC
load_all()
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
load_all()
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
#print
m
#summary & summary.print
summary(m)
#predict
predict(m)
predict(m, newdata = data.frame(treat = c("A", "P")))
#confint (NEW!)
confint(m)
#QIC
QIC(m)
load_all()
#model
m <- geem2(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable",
output = "geeglm")
#QIC
QIC(m)
mgp <- geeglm(outcome ~ treat,
data = respiratory,
id = with(respiratory, interaction(center, id)),
family = "binomial", corstr = "exchangeable")
QIC(m)
library(lme4)
gemME()
getME()
?getME
####################################################################################
# Investigate handling of non-equidistant time points via waves argument
####################################################################################
set.seed(123)
exdat <- data.frame(x = rnorm(20))
exdat$y <- exdat$x + rnorm(20)
exdat$id <- rep(1:5, each = 4)
exdat
exdat$time <- c(1, 2, 3, 4, 1, 2, 5, 6, 1, 2, 4, 3, 5, 6, 1, 10, 1, 2, 3, 4)
exdat
exdat <- exdat[sample(1:20, 20),] #scramble order
exdat
#corstr: exchangeable
mexch <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "exchangeable",
output = "geeglm")
#corstr: exchangeable
m_exch <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "exchangeable",
output = "geeglm")
m_exch
m_exch_nowaves <- geem2(y ~ x, id = id,
data = exdat, corstr = "exchangeable",
output = "geeglm")
#corstr: exchangeable
m_exch_waves <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "exchangeable",
output = "geeglm")
m_exch_nowaves <- geem2(y ~ x, id = id,
data = exdat, corstr = "exchangeable",
output = "geeglm")
m_exch_wavse
m_exch_waves
m_exch_nowaves
identicalLists(m_exch_waves, m_exch_nowaves, ignore = c("call")
identicalLists(m_exch_waves, m_exch_nowaves, ignore = c("call"))
identicalLists(m_exch_waves, m_exch_nowaves, ignore = c("call"))
formals(identicalLists)
identicalLists(m_exch_waves, m_exch_nowaves, ignore = c("call"), numIfNotExact = FALSE)
identicalLists(m_exch_waves, m_exch_nowaves, ignore = c("call"), numIfNotExact = FALSE,
chatty = TRUE)
identicalLists(m_exch_waves, m_exch_nowaves, ignore = c("call"))
identicalLists(m_exch_waves, m_exch_nowaves, ignore = c("call"), chatty = TRUE)
#corstr ar1:
m_exch_waves <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm")
m_exch_nowaves <- geem2(y ~ x, id = id,
data = exdat, corstr = "ar1",
output = "geeglm")
#corstr ar1:
m_ar1_waves <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm")
m_ar1_nowaves <- geem2(y ~ x, id = id,
data = exdat, corstr = "ar1",
output = "geeglm")
identicalLists(m_ar1_waves, m_ar1_nowaves, ignore = c("call"), chatty = TRUE) #OK
m_ar1_waves
m_ar1_nowaves
debugonce(geem2)
m_ar1_waves
#corstr ar1:
m_ar1_waves <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm")
dat
wavespl
idspl
maxwave
dummyrows
?dummyrows
dummyrows
dat
wights
weights
dat
x
waves
dat
debugonce(geem2)
#corstr ar1:
m_ar1_waves <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm")
X
weights
X[weights == 0]
X[weights == 0] <- NA
X
geem.fit(x = X, y = Y, offset = offset, weights = weights,
control = control, id = id, family = famret,
corstr = corstr, allobs = allobs, sandwich = sandwich)
X$Intercept <- 1
X
X <- model.matrix(formula, dat) #nas
X
X[weights == 0, "x"] <- 0
geem.fit(x = X, y = Y, offset = offset, weights = weights,
control = control, id = id, family = famret,
corstr = corstr, allobs = allobs, sandwich = sandwich)
X[weights == 0, "x"] <- NA
geem.fit(x = X, y = Y, offset = offset, weights = weights,
control = control, id = id, family = famret,
corstr = corstr, allobs = allobs, sandwich = sandwich)
load_all()
debugonce(geem.fit)
#corstr ar1:
m_ar1_waves <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm")
tmp
eta
alpha.new
load_all()
load_all()
#corstr ar1:
m_ar1_waves_a <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm", testARG = 0)
m_ar1_waves_b <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm", testARG = 5)
m_ar1_waves_c <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm", testARG = 100)
m_ar1_waves_a
m_ar1_waves_b
m_ar1_waves_d <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm", testARG = NULL)
load_all()
#corstr ar1:
m_ar1_waves_a <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm", testARG = 0)
m_ar1_waves_b <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm", testARG = 5)
m_ar1_waves_c <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm", testARG = 100)
m_ar1_waves_d <- geem2(y ~ x, id = id, waves = time,
data = exdat, corstr = "ar1",
output = "geeglm", testARG = NULL)
m_ar1_waves_a
m_ar1_waves_b
m_ar1_waves_c
m_ar1_waves_d
m_ar1_nowaves
